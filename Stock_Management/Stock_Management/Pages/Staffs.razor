@page "/staffs"
@using Stock_Management.Data;
@using Stock_Management.Services;

<main>
    <div>
        <h3>Staffs</h3>
        <button @onclick='()=>DisplayActionDialog = true'><span class="oi oi-plus"></span> Add Staff</button>
    </div>

    <table>
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>User Type</th>
                <th>Registered By</th>
                <th>Registered Time</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.UserName</td>
                    <td>@user.UType</td>
                    <td>
                        @{
                            var registrar = ServiceUser.FetchUserById(user.RegisterdBy);
                            <span>@(registrar == null ? "system" : registrar.UserName)</span>
                        }
                    </td>
                    <td>@user.RegisteredAt.ToString("dd MMM, yyyy hh:mm tt")</td>

                    <td>
                        @if (globalUser.CurrentUser != null ? globalUser.CurrentUser.Id != user.Id : false)
                        {
                                            <button class="delete" @onclick='()=> OpenDeleteDialog(user)' disabled='@(user.UType == TypeUser.Admin ? true : false)'><span class="oi oi oi-x"></span>Delete</button>
                        }
                        else
                        {
                            <NavLink class="changePassword" href="update"><span class="oi oi-loop-circular"></span> Update</NavLink>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (DisplayActionDialog)
    {
        <section class="action-modal">
            <section class="background" @onclick='()=>DisplayActionDialog = false'></section>
            <div>
                <h3>Add User</h3>

                @if (addErrorMessage.Length > 0)
                {
                    <p><span class="oi oi-warning"></span> @addErrorMessage</p>
                }

                <form @onsubmit="HandleAddUser">
                    <section>
                        <input type="text" @bind="firstName" placeholder="First Name" />
                        <input type="text" @bind="lastName" placeholder="Last Name" />
                    </section>

                    <input type="text" @bind="userName" placeholder="Username" />
                    <input type="@passType" @bind="password" placeholder="Password" />
                    <input type="@passType" @bind="confirmPassword" placeholder="Confirm Password" />


                    <div>
                        <label for="admin-radio">
                            <span>Admin</span>
                                    <input type="radio" value="@TypeUser.Admin" id="admin-radio" @onchange="UserTypeChangeHandler" checked="@(userType == TypeUser.Admin)" />
                        </label>

                        <label for="staff-radio">
                            <span>Staff</span>
                                    <input type="radio" value="@TypeUser.Staff" id="staff-radio" @onchange="UserTypeChangeHandler" checked="@(userType == TypeUser.Staff)" />
                        </label>
                    </div>

                    <label for="showPass">
                        <input type="checkbox" id="showPass" @onchange="HandlePass" />
                        <span>Show Password</span>
                    </label>

                    <button>Add User</button>
                </form>
            </div>
        </section>
    }

    @if (DisplayDeleteDialog)
    {
        <div class="delete-dialog-wrapper">
            <section class="delete-background" @onclick='@(()=> DisplayDeleteDialog = false)'></section>

            <section class="delete-dialog @DisplayDeleteDialog-dialog">
                <h2>Delete User</h2>
                @if (!string.IsNullOrEmpty(deleteErrorMessage))
                {
                    <p><span class="oi oi-x"></span>@deleteErrorMessage</p>
                }
                <p>Are you sure you want to delete <strong>@deleteUser.FirstName @deleteUser.LastName</strong></p>
               

                <div>
                    <button class="cancel" @onclick='@(()=> DisplayDeleteDialog = false)'>Cancel</button>
                    <button @onclick='()=> HandleDelete(deleteUser)'>Delete</button>
                </div>
            </section>
        </div>
    }

</main>

@code {
    [CascadingParameter]
    private UserCurrent globalUser { get; set; }
    private List<ModelUser> users { get; set; }
    private bool DisplayActionDialog { get; set; } = false;
    private bool DisplayDeleteDialog { get; set; } = false;

    private string userName { get; set; }
    private string password { get; set; }
    private string confirmPassword { get; set; }
    private string firstName { get; set; }
    private string lastName { get; set; }
    private TypeUser userType { get; set; }
    private ModelUser deleteUser { get; set; }

    string passType = "password";
    string addErrorMessage = "";
    string deleteErrorMessage = "";

    protected override void OnInitialized()
    {
        users = ServiceUser.FetchUsers();
    }

    public void HandleAddUser()
    {
        if (userName == null || password == null || confirmPassword == null || firstName == null || lastName == null)
        {
            addErrorMessage = "Provide complete details.";
            return;
        }

        if (password != confirmPassword)
        {
            addErrorMessage = "Confirm password.";
            return;
        }

        try
        {
            users = ServiceUser.RegisterUser(globalUser.CurrentUser.Id, userName, firstName, lastName, password, userType);
            firstName = "";
            lastName = "";
            userName = "";
            password = "";
            confirmPassword = "";
            passType = "password";
            DisplayActionDialog = false;
        }
        catch (Exception e)
        {
            addErrorMessage = e.Message;
        }

    }

    public void OpenDeleteDialog(ModelUser user)
    {
        deleteUser = user;
        DisplayDeleteDialog = true;
    }

    public void HandleDelete(ModelUser user)
    {
        if (user.UType == TypeUser.Admin)
        {
            deleteErrorMessage = "Admin cannot be deleted.";
        }

        try
        {
            users = ServiceUser.DeleteUser(user.Id);
            DisplayDeleteDialog = false;
        }
        catch (Exception e)
        {
            deleteErrorMessage = e.Message;
        }
    }

    public void UserTypeChangeHandler(ChangeEventArgs e)
    {
        userType = (TypeUser)Enum.Parse(typeof(TypeUser), e.Value.ToString());
    }

    public void HandlePass()
    {
        passType = passType == "password" ? "text" : "password";
    }
}
